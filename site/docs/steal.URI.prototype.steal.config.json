c({"name": "steal.URI.prototype.steal.config", "params": {"config": {"description": "", "type": "", "optional": false, "order": 0, "name": "config"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["steal.URI.prototype"], "comment": "<p><code>steal.config(config)</code> configures steal. Typically it it used\nin <strong>stealconfig.js</strong>.  The available options are:</p>\n\n<ul>\n<li>map - map an id to another id</li>\n<li>paths - maps an id to a file</li>\n<li>root - the path to the \"root\" folder</li>\n<li>env - <code>\"development\"</code> or <code>\"production\"</code></li>\n<li>types - processor rules for various types</li>\n<li>ext - behavior rules for extensions</li>\n<li>urlArgs - extra queryString arguments</li>\n<li>startFile - the file to load</li>\n</ul>\n\n<h2>map</h2>\n\n<p>Maps an id to another id with a certain scope of other ids. This can be\nused to use different modules within the same id or map ids to another id.\nExample:</p>\n\n<pre><code>steal.config({\n  map: {\n    \"*\": {\n      \"jquery/jquery.js\": \"jquery\"\n    },\n    \"compontent1\":{\n      \"underscore\" : \"underscore1.2\"\n    },\n    \"component2\":{\n      \"underscore\" : \"underscore1.1\"  \n    }\n  }\n})\n</code></pre>\n\n<h2>paths</h2>\n\n<p>Maps an id or matching ids to a url. Each mapping is specified\nby an id or part of the id to match and what that \npart should be replaced with.</p>\n\n<pre><code>steal.config({\n  paths: {\n       // maps everything in a jquery folder like: `jquery/controller`\n    // to http://cdn.com/jquery/controller/controller.com\n       \"jquery/\" : \"http://cdn.com/jquery/\"\n\n    // if path does not end with /, it matches only that id\n    \"jquery\" : \"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"\n  }\n}) \n</code></pre>\n\n<h2>root</h2>\n\n<h2>env</h2>\n\n<p>If production, does not load \"ignored\" scripts and loads production script.  If development gives more warnings / errors.</p>\n\n<h2>types</h2>\n\n<p>The types option can specify how a type is loaded. </p>\n\n<h2>ext</h2>\n\n<p>The ext option specifies the default behavior if file is loaded with the \nspecified extension. For a given extension, a file that configures the type can be given or\nan existing type. For example, for ejs:</p>\n\n<pre><code>steal.config({ext: {\"ejs\": \"can/view/ejs/ejs.js\"}})\n</code></pre>\n\n<p>This tells steal to make sure <code>can/view/ejs/ejs.js</code> is executed before any file with\n\".ejs\" is executed.</p>\n\n<h2>startFile</h2>", "src": "steal/steal.js", "line": 531, "children": []})